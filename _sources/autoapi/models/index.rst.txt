models
======

.. py:module:: models


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/models/aircraft/index
   /autoapi/models/centerpoint/index
   /autoapi/models/flood/index
   /autoapi/models/server_utils/index


Functions
---------

.. autoapisummary::

   models.build_flask_app
   models.build_logger
   models.detect_to_feature
   models.setup_server


Package Contents
----------------

.. py:function:: build_flask_app(logger: logging.Logger) -> flask.Flask

   Create a Flask app and configure it to use the provided logger.
   The logger will output logs in JSON format and write to sys.stdout.

   :param logger: The logger to use with the application
   :return: Configured Flask app instance.


.. py:function:: build_logger(level: int = logging.WARN) -> logging.Logger

   Utility function to create and configure a logger that outputs logs in JSON format.

   :param level: Logging level (default: logging.INFO).
   :return: Configured logger instance.


.. py:function:: detect_to_feature(fixed_object_bbox: List[float], fixed_object_mask: Optional[List[List[float]]] = None, detection_score: Optional[float] = 1.0, detection_type: Optional[str] = 'sample_object') -> Dict[str, Union[str, list]]

   Converts the bbox object into a sample GeoJSON formatted detection.
   The model container does not normally provide the world coordinates,
   so they're defaulted to 0,0 here since GeoJSON features require a geometry.

   :param detection_type: Class assigned to the detection
   :param detection_score: Confidence score assigned to the detection
   :param fixed_object_mask: Polygon version of mask generated by detectron2
   :param fixed_object_bbox: Bounding box to transform into a geojson feature
   :return: dict: Dictionary representation of a geojson feature


.. py:function:: setup_server(app: flask.Flask)

   The assumption is that this script will be the ENTRYPOINT for the inference
   container. SageMaker will launch the container with the "serve" argument. We
   also have the option of using multiple models from this single container;
   only one model will be active at a time (i.e., this is not a Multi Model Server),
   so it can be selected by name using the "model" parameter.

   :param app: The flask application to set up
   :return: None


